import requests
import pandas as pd
import numpy as np
from collections import Counter
from itertools import combinations
import random

# Pobranie danych
url = 'http://www.mbnet.com.pl/ml.txt'
response = requests.get(url)
content = response.text.splitlines()

# Przetworzenie danych
data = []
previous_date = None
draw_counter = 1

for line in content:
    parts = line.strip().split(' ', 2)
    if len(parts) == 3:
        draw_number = parts[0]
        date = parts[1]
        if date == previous_date:
            draw_counter += 1
        else:
            draw_counter = 1
        previous_date = date
        time = '14:00' if draw_counter == 1 else '22:00'  # Przypisujemy godziny losowań
        results = parts[2]
        data.append([draw_number, date, time, results])

df = pd.DataFrame(data, columns=['Draw Number', 'Date', 'Time', 'Results'])
df['Date'] = pd.to_datetime(df['Date'], format='%d.%m.%Y')
results_expanded = df['Results'].str.split(',', expand=True)
results_expanded.columns = [f'Number_{i+1}' for i in range(results_expanded.shape[1])]
df = pd.concat([df, results_expanded], axis=1)
df.drop(columns=['Results'], inplace=True)

# Wyświetlenie ostatniego losowania
last_draw = df.iloc[-1]
print(f"Ostatnie losowanie:")
print(f"Data: {last_draw['Date'].strftime('%Y-%m-%d')}")
print(f"Numer losowania: {last_draw['Draw Number']}")
print(f"Godzina: {last_draw['Time']}")
print(f"Liczby: {', '.join(last_draw.iloc[3:].dropna())}")

# Pobranie liczby losowań do analizy od użytkownika
num_draws_to_analyze = int(input("\nIle ostatnich losowań chcesz wziąć pod uwagę do analizy? "))
df_last_n_draws = df.tail(num_draws_to_analyze)

# Analiza najczęściej losowanych liczb
def analyze_most_frequent_numbers(df):
    number_columns = [f'Number_{i+1}' for i in range(20)]
    all_numbers = df[number_columns].values.flatten()
    unique, counts = np.unique(all_numbers, return_counts=True)
    frequency_dict = dict(zip(unique, counts))
    frequency_df = pd.DataFrame(list(frequency_dict.items()), columns=['Number', 'Frequency']).sort_values(by='Frequency', ascending=False)
    return frequency_df

most_frequent_numbers = analyze_most_frequent_numbers(df_last_n_draws)
print("\nNajczęściej losowane liczby:")
print(most_frequent_numbers.head(10))

# Analiza liczb, które najdłużej nie były losowane
def analyze_long_absent_numbers(df, total_numbers=80):
    all_numbers = set(range(1, total_numbers + 1))
    appeared_numbers = set(int(x) for col in df.columns[3:] for x in df[col].values)
    absent_numbers = all_numbers - appeared_numbers
    
    last_seen = {number: df['Date'].max() for number in all_numbers}
    for number in appeared_numbers:
        last_occurrence = df[df.apply(lambda row: str(number) in row[3:].values, axis=1)]['Date']
        if not last_occurrence.empty:
            last_seen[number] = last_occurrence.max()
        else:
            last_seen[number] = df['Date'].min()
    
    absent_durations = {number: (df['Date'].max() - last_seen[number]).days for number in all_numbers}
    return sorted(absent_durations.items(), key=lambda x: x[1], reverse=True)

long_absent_numbers = analyze_long_absent_numbers(df_last_n_draws)
print("\nLiczby, które najdłużej nie były losowane:")
for number, days in long_absent_numbers[:10]:
    print(f"Liczba {number} nie była losowana przez {days} dni")

# Analiza par liczb
def analyze_number_pairs(df):
    number_columns = [f'Number_{i+1}' for i in range(20)]
    pairs = Counter()
    for row in df[number_columns].values:
        row_pairs = combinations(row, 2)
        pairs.update(row_pairs)
    return pairs.most_common(10)

most_common_pairs = analyze_number_pairs(df_last_n_draws)
print("\nNajczęściej występujące pary liczb:")
for pair, count in most_common_pairs:
    print(f"Pary {pair} pojawiły się razem {count} razy")

# Analiza najczęstszych sekwencji liczb
def analyze_number_sequences(df, sequence_length=3):
    number_columns = [f'Number_{i+1}' for i in range(20)]
    sequences = Counter()
    for row in df[number_columns].values:
        row_sequences = combinations(row, sequence_length)
        sequences.update(row_sequences)
    return sequences.most_common(10)

most_common_sequences = analyze_number_sequences(df_last_n_draws)
print("\nNajczęściej występujące sekwencje liczb:")
for sequence, count in most_common_sequences:
    print(f"Sekwencje {sequence} pojawiły się razem {count} razy")

# Analiza częstości występowania liczb w różnych okresach
def analyze_frequency_over_periods(df, periods):
    results = {}
    for period in periods:
        df_period = df.tail(period)
        most_frequent_numbers = analyze_most_frequent_numbers(df_period)
        results[period] = most_frequent_numbers
    return results

periods = [30, 60, 90]
frequency_over_periods = analyze_frequency_over_periods(df_last_n_draws, periods)
for period, freq_df in frequency_over_periods.items():
    print(f"\nNajczęściej losowane liczby w ciągu ostatnich {period} dni:")
    print(freq_df.head(10))

# Analiza średnich odstępów między losowaniami
def analyze_average_gaps(df):
    number_columns = [f'Number_{i+1}' for i in range(20)]
    gap_stats = {}
    for number in range(1, 81):
        occurrences = df[df.apply(lambda row: str(number) in row[number_columns].values, axis=1)]['Date']
        if len(occurrences) > 1:
            gaps = occurrences.diff().dt.days[1:]
            gap_stats[number] = gaps.mean()
    return gap_stats

average_gaps = analyze_average_gaps(df_last_n_draws)
average_gaps = sorted(average_gaps.items(), key=lambda x: x[1])
print("\nŚrednie odstępy między wystąpieniami dla poszczególnych liczb:")
for number, gap in average_gaps[:10]:
    print(f"Liczba {number} - średni odstęp: {gap} dni")

# Analiza liczb w najczęściej występujących grupach
def analyze_number_groups(df):
    number_columns = [f'Number_{i+1}' for i in range(20)]
    groups = {f'{i}-{i+9}': 0 for i in range(1, 81, 10)}
    for row in df[number_columns].values:
        for number in row:
            for group in groups:
                start, end = map(int, group.split('-'))
                if start <= int(number) <= end:
                    groups[group] += 1
    return sorted(groups.items(), key=lambda x: x[1], reverse=True)

number_groups = analyze_number_groups(df_last_n_draws)
print("\nNajczęściej występujące grupy liczb:")
for group, count in number_groups:
    print(f"Grupa {group} - wystąpienia: {count}")

# Analiza liczby wystąpień liczb w określonych godzinach losowań
def analyze_frequency_by_time(df):
    df_14 = df[df['Time'] == '14:00']
    df_22 = df[df['Time'] == '22:00']
    freq_14 = analyze_most_frequent_numbers(df_14)
    freq_22 = analyze_most_frequent_numbers(df_22)
    return freq_14, freq_22

freq_14, freq_22 = analyze_frequency_by_time(df_last_n_draws)
print("\nNajczęściej losowane liczby w losowaniach o 14:00:")
print(freq_14.head(10))
print("\nNajczęściej losowane liczby w losowaniach o 22:00:")
print(freq_22.head(10))

# Analiza liczby wystąpień liczb w określonych dniach tygodnia
def analyze_frequency_by_weekday(df):
    df = df.copy()  # Uniknięcie SettingWithCopyWarning
    df['Weekday'] = df['Date'].dt.weekday
    results = {}
    for weekday in range(7):
        df_weekday = df[df['Weekday'] == weekday]
        freq_weekday = analyze_most_frequent_numbers(df_weekday)
        results[weekday] = freq_weekday
    return results

frequency_by_weekday = analyze_frequency_by_weekday(df_last_n_draws)
weekdays = ['Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota', 'Niedziela']
for weekday, freq_df in frequency_by_weekday.items():
    print(f"\nNajczęściej losowane liczby w {weekdays[weekday]}:")
    print(freq_df.head(10))

# Analiza sekwencji występowania
def analyze_following_numbers(df):
    number_columns = [f'Number_{i+1}' for i in range(20)]
    following_numbers = Counter()
    for i in range(len(df) - 1):
        current_draw = df.iloc[i][number_columns].values
        next_draw = df.iloc[i + 1][number_columns].values
        for number in current_draw:
            for next_number in next_draw:
                following_numbers[(number, next_number)] += 1
    return following_numbers.most_common(10)

following_numbers = analyze_following_numbers(df_last_n_draws)
print("\nNajczęściej występujące sekwencje liczb:")
for sequence, count in following_numbers:
    print(f"Sekwencja {sequence} pojawiła się {count} razy")

# Zgromadzenie sugerowanych liczb z wyjaśnieniami
suggested_numbers = {}
reasons = []

# Dodanie najczęściej losowanych liczb
for number in most_frequent_numbers['Number'].head(5):
    suggested_numbers[int(number)] = "Najczęściej losowana liczba"
    reasons.append(f"Liczba {number} pojawiła się najczęściej w ostatnich losowaniach.")

# Dodanie liczb, które najdłużej nie były losowane
for number, days in long_absent_numbers[:5]:
    suggested_numbers[int(number)] = "Najdłużej nie losowana liczba"
    reasons.append(f"Liczba {number} nie była losowana przez {days} dni.")

# Dodanie liczb z najczęstszych par
for pair, count in most_common_pairs:
    for number in map(int, pair):
        if number not in suggested_numbers:
            suggested_numbers[number] = "Często występująca para"
            reasons.append(f"Liczba {number} często występowała w parze.")

# Dodanie liczb z najczęstszych sekwencji
for sequence, count in most_common_sequences:
    for number in map(int, sequence):
        if number not in suggested_numbers:
            suggested_numbers[number] = "Często występująca sekwencja"
            reasons.append(f"Liczba {number} często występowała w sekwencji.")

# Ograniczenie do unikalnych liczb i wybranie top 15
suggested_numbers = {k: suggested_numbers[k] for k in list(suggested_numbers)[:15]}

# Wyświetlenie sugerowanych liczb z wyjaśnieniem
print("\nSugerowane liczby do następnego losowania na podstawie analiz:")
for number, reason in suggested_numbers.items():
    print(f"{number}: {reason}")

print("\nWyjaśnienia:")
for reason in reasons:
    print(reason)

print("\nSugerowane liczby w formacie ciągu liczbowego oddzielonego przecinkami:")
suggested_numbers_list = list(suggested_numbers.keys())
print(", ".join(map(str, suggested_numbers_list)))

# Zapytanie użytkownika o liczbę zakładów i liczb w zakładzie
num_tickets = int(input("\nIle zakładów chcesz typować? "))
num_numbers_per_ticket = int(input("Ile liczb w każdym zakładzie? "))

# Generowanie zakładów
random.shuffle(suggested_numbers_list)
tickets = []
for i in range(num_tickets):
    ticket = sorted(random.sample(suggested_numbers_list, num_numbers_per_ticket))
    tickets.append(ticket)
    print(f"Zakład {i+1}: {', '.join(map(str, ticket))}")

# Sprawdzenie, ile losowań wstecz sprawdzić oraz ile liczb ma się pojawić
num_draws_to_check = int(input("\nIle losowań wstecz chcesz sprawdzić, czy taka kombinacja zaproponowanych liczb się pojawiła? "))
num_numbers_to_appear = int(input("Ile liczb ma się pojawić? "))

# Funkcja sprawdzająca, ile liczb z kombinacji pojawiło się kiedykolwiek i kiedy
def check_combination_existence(df, combination, min_count):
    combination_set = set(map(str, combination))
    results = []
    for _, row in df.iterrows():
        drawn_numbers = set(row[3:].dropna())
        common_numbers = combination_set.intersection(drawn_numbers)
        if len(common_numbers) >= min_count:
            results.append((row['Draw Number'], row['Date'], len(common_numbers), sorted(common_numbers)))
    return results

# Sprawdzenie, czy kombinacja liczb się pojawiła
df_check_draws = df.tail(num_draws_to_check)
for i, ticket in enumerate(tickets):
    results = check_combination_existence(df_check_draws, ticket, num_numbers_to_appear)
    print(f"\nSprawdzenie zakładu {i+1}: {', '.join(map(str, ticket))}")
    if results:
        for result in results:
            print(f"{result[0]} - {result[1].strftime('%Y-%m-%d')} - Liczby: {', '.join(map(str, result[3]))}")
    else:
        print("Nie znaleziono losowań spełniających kryteria.")
